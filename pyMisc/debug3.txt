




  
    
    
    7
2
 re — Regular expression operations &mdash; Python v2
7
5 documentation
    
    
    
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '

/',
        VERSION:     '2
7
5',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '
html',
        HAS_SOURCE:  true
      };
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
 

  
  
    
      Navigation
      
        
          index
        
          modules |
        
          next |
        
          previous |
        
        Python &raquo;
        
          2
7
5
          Documentation &raquo;
        

          The Python Standard Library &raquo;
          7
 String Services &raquo; 
      
      

    
      
        
          
            
  
7
2
 re &#8212; Regular expression operations¶

This module provides regular expression matching operations similar to
those found in Perl
 Both patterns and strings to be searched can be
Unicode strings as well as 8-bit strings



Regular expressions use the backslash character ('\') to indicate
special forms or to allow special characters to be used without invoking
their special meaning
  This collides with Python&#8217;s usage of the same
character for the same purpose in string literals; for example, to match
a literal backslash, one might have to write '\\\\' as the pattern
string, because the regular expression must be \\, and each
backslash must be expressed as \\ inside a regular Python string
literal



The solution is to use Python&#8217;s raw string notation for regular expression
patterns; backslashes are not handled in any special way in a string literal
prefixed with 'r'
  So r&quot;\n&quot; is a two-character string containing
'\' and 'n', while &quot;\n&quot; is a one-character string containing a
newline
  Usually patterns will be expressed in Python code using this raw
string notation



It is important to note that most regular expression operations are available as
module-level functions and RegexObject methods
  The functions are
shortcuts that don&#8217;t require you to compile a regex object first, but miss some
fine-tuning parameters



See also


Mastering Regular Expressions
Book on regular expressions by Jeffrey Friedl, published by O&#8217;Reilly
  The
second edition of the book no longer covers Python at all, but the first
edition covered writing good regular expression patterns in great detail




7
2
1
 Regular Expression Syntax¶

A regular expression (or RE) specifies a set of strings that matches it; the
functions in this module let you check if a particular string matches a given
regular expression (or if a given regular expression matches a particular
string, which comes down to the same thing)



Regular expressions can be concatenated to form new regular expressions; if A
and B are both regular expressions, then AB is also a regular expression

In general, if a string p matches A and another string q matches B, the
string pq will match AB
  This holds unless A or B contain low precedence
operations; boundary conditions between A and B; or have numbered group
references
  Thus, complex expressions can easily be constructed from simpler
primitive expressions like the ones described here
  For details of the theory
and implementation of regular expressions, consult the Friedl book referenced
above, or almost any textbook about compiler construction



A brief explanation of the format of regular expressions follows
  For further
information and a gentler presentation, consult the Regular Expression HOWTO



Regular expressions can contain both special and ordinary characters
 Most
ordinary characters, like 'A', 'a', or '0', are the simplest regular
expressions; they simply match themselves
  You can concatenate ordinary
characters, so last matches the string 'last'
  (In the rest of this
section, we&#8217;ll write RE&#8217;s in this special style, usually without quotes, and
strings to be matched 'in single quotes'
)


Some characters, like '|' or '(', are special
 Special
characters either stand for classes of ordinary characters, or affect
how the regular expressions around them are interpreted
 Regular
expression pattern strings may not contain null bytes, but can specify
the null byte using the \number notation, e
g
, '\x00'



The special characters are:


'
'
(Dot
)  In the default mode, this matches any character except a newline
  If
the DOTALL flag has been specified, this matches any character
including a newline

'^'
(Caret
)  Matches the start of the string, and in MULTILINE mode also
matches immediately after each newline

'$'
Matches the end of the string or just before the newline at the end of the
string, and in MULTILINE mode also matches before a newline
  foo
matches both &#8216;foo&#8217; and &#8216;foobar&#8217;, while the regular expression foo$ matches
only &#8216;foo&#8217;
  More interestingly, searching for foo
$ in 'foo1\nfoo2\n'
matches &#8216;foo2&#8217; normally, but &#8216;foo1&#8217; in MULTILINE mode; searching for
a single $ in 'foo\n' will find two (empty) matches: one just before
the newline, and one at the end of the string

'*'
Causes the resulting RE to match 0 or more repetitions of the preceding RE, as
many repetitions as are possible
  ab* will match &#8216;a&#8217;, &#8216;ab&#8217;, or &#8216;a&#8217; followed
by any number of &#8216;b&#8217;s

'+'
Causes the resulting RE to match 1 or more repetitions of the preceding RE

ab+ will match &#8216;a&#8217; followed by any non-zero number of &#8216;b&#8217;s; it will not
match just &#8216;a&#8217;

'
'
Causes the resulting RE to match 0 or 1 repetitions of the preceding RE

ab
 will match either &#8216;a&#8217; or &#8216;ab&#8217;

*
, +
, 


The '*', '+', and '
' qualifiers are all greedy; they match
as much text as possible
  Sometimes this behaviour isn&#8217;t desired; if the RE
&lt;
*&gt; is matched against '&lt;H1&gt;title&lt;/H1&gt;', it will match the entire
string, and not just '&lt;H1&gt;'
  Adding '
' after the qualifier makes it
perform the match in non-greedy or minimal fashion; as few
characters as possible will be matched
  Using 
*
 in the previous
expression will match only '&lt;H1&gt;'

{m}
Specifies that exactly m copies of the previous RE should be matched; fewer
matches cause the entire RE not to match
  For example, a{6} will match
exactly six 'a' characters, but not five

{m,n}
Causes the resulting RE to match from m to n repetitions of the preceding
RE, attempting to match as many repetitions as possible
  For example,
a{3,5} will match from 3 to 5 'a' characters
  Omitting m specifies a
lower bound of zero,  and omitting n specifies an infinite upper bound
  As an
example, a{4,}b will match aaaab or a thousand 'a' characters
followed by a b, but not aaab
 The comma may not be omitted or the
modifier would be confused with the previously described form

{m,n}

Causes the resulting RE to match from m to n repetitions of the preceding
RE, attempting to match as few repetitions as possible
  This is the
non-greedy version of the previous qualifier
  For example, on the
6-character string 'aaaaaa', a{3,5} will match 5 'a' characters,
while a{3,5}
 will only match 3 characters

'\'
Either escapes special characters (permitting you to match characters like
'*', '
', and so forth), or signals a special sequence; special
sequences are discussed below


If you&#8217;re not using a raw string to express the pattern, remember that Python
also uses the backslash as an escape sequence in string literals; if the escape
sequence isn&#8217;t recognized by Python&#8217;s parser, the backslash and subsequent
character are included in the resulting string
  However, if Python would
recognize the resulting sequence, the backslash should be repeated twice
  This
is complicated and hard to understand, so it&#8217;s highly recommended that you use
raw strings for all but the simplest expressions



[]
Used to indicate a set of characters
  In a set:


Characters can be listed individually, e
g
 [amk] will match 'a',
'm', or 'k'

Ranges of characters can be indicated by giving two characters and separating
them by a '-', for example [a-z] will match any lowercase ASCII letter,
[0-5][0-9] will match all the two-digits numbers from 00 to 59, and
[0-9A-Fa-f] will match any hexadecimal digit
  If - is escaped (e
g

[a\-z]) or if it&#8217;s placed as the first or last character (e
g
 [a-]),
it will match a literal '-'

Special characters lose their special meaning inside sets
  For example,
[(+*)] will match any of the literal characters '(', '+',
'*', or ')'

Character classes such as \w or \S (defined below) are also accepted
inside a set, although the characters they match depends on whether
LOCALE or  UNICODE mode is in force

Characters that are not within a range can be matched by complementing
the set
  If the first character of the set is '^', all the characters
that are not in the set will be matched
  For example, [^5] will match
any character except '5', and [^^] will match any character except
'^'
  ^ has no special meaning if it&#8217;s not the first character in
the set

To match a literal ']' inside a set, precede it with a backslash, or
place it at the beginning of the set
  For example, both [()[\]{}] and
[]()[{}] will both match a parenthesis



'|'
A|B, where A and B can be arbitrary REs, creates a regular expression that
will match either A or B
  An arbitrary number of REs can be separated by the
'|' in this way
  This can be used inside groups (see below) as well
  As
the target string is scanned, REs separated by '|' are tried from left to
right
 When one pattern completely matches, that branch is accepted
 This means
that once A matches, B will not be tested further, even if it would
produce a longer overall match
  In other words, the '|' operator is never
greedy
  To match a literal '|', use \|, or enclose it inside a
character class, as in [|]

(


)
Matches whatever regular expression is inside the parentheses, and indicates the
start and end of a group; the contents of a group can be retrieved after a match
has been performed, and can be matched later in the string with the \number
special sequence, described below
  To match the literals '(' or ')',
use \( or \), or enclose them inside a character class: [(] [)]

(



)
This is an extension notation (a '
' following a '(' is not meaningful
otherwise)
  The first character after the '
' determines what the meaning
and further syntax of the construct is
 Extensions usually do not create a new
group; (
P&lt;name&gt;


) is the only exception to this rule
 Following are the
currently supported extensions

(
iLmsux)
(One or more letters from the set 'i', 'L', 'm', 's',
'u', 'x'
)  The group matches the empty string; the letters
set the corresponding flags: re
I (ignore case),
re
L (locale dependent), re
M (multi-line),
re
S (dot matches all), re
U (Unicode dependent),
and re
X (verbose), for the entire regular expression
 (The
flags are described in Module Contents
) This
is useful if you wish to include the flags as part of the regular
expression, instead of passing a flag argument to the
re
compile() function


Note that the (
x) flag changes how the expression is parsed
 It should be
used first in the expression string, or after one or more whitespace characters

If there are non-whitespace characters before the flag, the results are
undefined



(
:


)
A non-capturing version of regular parentheses
  Matches whatever regular
expression is inside the parentheses, but the substring matched by the group
cannot be retrieved after performing a match or referenced later in the
pattern

(
P&lt;name&gt;


)
Similar to regular parentheses, but the substring matched by the group is
accessible within the rest of the regular expression via the symbolic group
name name
  Group names must be valid Python identifiers, and each group
name must be defined only once within a regular expression
  A symbolic group
is also a numbered group, just as if the group were not named
  So the group
named id in the example below can also be referenced as the numbered group
1


For example, if the pattern is (
P&lt;id&gt;[a-zA-Z_]\w*), the group can be
referenced by its name in arguments to methods of match objects, such as
m
group('id') or m
end('id'), and also by name in the regular
expression itself (using (
P=id)) and replacement text given to

sub() (using \g&lt;id&gt;)



(
P=name)
Matches whatever text was matched by the earlier group named name

(
#


)
A comment; the contents of the parentheses are simply ignored

(
=


)
Matches if 


 matches next, but doesn&#8217;t consume any of the string
  This is
called a lookahead assertion
  For example, Isaac (
=Asimov) will match
'Isaac ' only if it&#8217;s followed by 'Asimov'

(
!


)
Matches if 


 doesn&#8217;t match next
  This is a negative lookahead assertion

For example, Isaac (
!Asimov) will match 'Isaac ' only if it&#8217;s not
followed by 'Asimov'

(
&lt;=


)
Matches if the current position in the string is preceded by a match for 



that ends at the current position
  This is called a positive lookbehind
assertion
 (
&lt;=abc)def will find a match in abcdef, since the
lookbehind will back up 3 characters and check if the contained pattern matches

The contained pattern must only match strings of some fixed length, meaning that
abc or a|b are allowed, but a* and a{3,4} are not
  Note that
patterns which start with positive lookbehind assertions will not match at the
beginning of the string being searched; you will most likely want to use the
search() function rather than the match() function:

&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re
search(&#39;(
&lt;=abc)def&#39;, &#39;abcdef&#39;)
&gt;&gt;&gt; m
group(0)
&#39;def&#39;



This example looks for a word following a hyphen:

&gt;&gt;&gt; m = re
search(&#39;(
&lt;=-)\w+&#39;, &#39;spam-egg&#39;)
&gt;&gt;&gt; m
group(0)
&#39;egg&#39;



(
&lt;!


)
Matches if the current position in the string is not preceded by a match for




  This is called a negative lookbehind assertion
  Similar to
positive lookbehind assertions, the contained pattern must only match strings of
some fixed length
  Patterns which start with negative lookbehind assertions may
match at the beginning of the string being searched

(
(id/name)yes-pattern|no-pattern)
Will try to match with yes-pattern if the group with given id or name
exists, and with no-pattern if it doesn&#8217;t
 no-pattern is optional and
can be omitted
 For example,  (&lt;)
(\w+&#64;\w+(
:\
\w+)+)(
(1)&gt;) is a poor email
matching pattern, which will match with '&lt;user&#64;host
com&gt;' as well as
'user&#64;host
com', but not with '&lt;user&#64;host
com'



New in version 2
4





The special sequences consist of '\' and a character from the list below

If the ordinary character is not on the list, then the resulting RE will match
the second character
  For example, \$ matches the character '$'



\number
Matches the contents of the group of the same number
  Groups are numbered
starting from 1
  For example, (
+) \1 matches 'the the' or '55 55',
but not 'the end' (note the space after the group)
  This special sequence
can only be used to match one of the first 99 groups
  If the first digit of
number is 0, or number is 3 octal digits long, it will not be interpreted as
a group match, but as the character with octal value number
 Inside the
'[' and ']' of a character class, all numeric escapes are treated as
characters

\A
Matches only at the start of the string

\b
Matches the empty string, but only at the beginning or end of a word
  A word is
defined as a sequence of alphanumeric or underscore characters, so the end of a
word is indicated by whitespace or a non-alphanumeric, non-underscore character

Note that formally, \b is defined as the boundary between a \w and
a \W character (or vice versa), or between \w and the beginning/end
of the string, so the precise set of characters deemed to be alphanumeric
depends on the values of the UNICODE and LOCALE flags

For example, r'\bfoo\b' matches 'foo', 'foo
', '(foo)',
'bar foo baz' but not 'foobar' or 'foo3'

Inside a character range, \b represents the backspace character, for compatibility with Python&#8217;s string literals

\B
Matches the empty string, but only when it is not at the beginning or end of a
word
  This means that r'py\B' matches 'python', 'py3', 'py2',
but not 'py', 'py
', or 'py!'

\B is just the opposite of \b, so is also subject to the settings
of LOCALE and UNICODE

\d
When the UNICODE flag is not specified, matches any decimal digit; this
is equivalent to the set [0-9]
  With UNICODE, it will match
whatever is classified as a decimal digit in the Unicode character properties
database

\D
When the UNICODE flag is not specified, matches any non-digit
character; this is equivalent to the set  [^0-9]
  With UNICODE, it
will match  anything other than character marked as digits in the Unicode
character  properties database

\s
When the UNICODE flag is not specified, it matches any whitespace
character, this is equivalent to the set [ \t\n\r\f\v]
 The
LOCALE flag has no extra effect on matching of the space

If UNICODE is set, this will match the characters [ \t\n\r\f\v]
plus whatever is classified as space in the Unicode character properties
database

\S
When the UNICODE flags is not specified, matches any non-whitespace
character; this is equivalent to the set [^ \t\n\r\f\v] The
LOCALE flag has no extra effect on non-whitespace match
  If
UNICODE is set, then any character not marked as space in the
Unicode character properties database is matched

\w
When the LOCALE and UNICODE flags are not specified, matches
any alphanumeric character and the underscore; this is equivalent to the set
[a-zA-Z0-9_]
  With LOCALE, it will match the set [0-9_] plus
whatever characters are defined as alphanumeric for the current locale
  If
UNICODE is set, this will match the characters [0-9_] plus whatever
is classified as alphanumeric in the Unicode character properties database

\W
When the LOCALE and UNICODE flags are not specified, matches
any non-alphanumeric character; this is equivalent to the set [^a-zA-Z0-9_]

With LOCALE, it will match any character not in the set [0-9_], and
not defined as alphanumeric for the current locale
 If UNICODE is set,
this will match anything other than [0-9_] plus characters classied as
not alphanumeric in the Unicode character properties database

\Z
Matches only at the end of the string



If both LOCALE and UNICODE flags are included for a
particular sequence, then LOCALE flag takes effect first followed by
the UNICODE



Most of the standard escapes supported by Python string literals are also
accepted by the regular expression parser:

\a      \b      \f      \n
\r      \t      \v      \x
\\


(Note that \b is used to represent word boundaries, and means &#8220;backspace&#8221;
only inside character classes
)


Octal escapes are included in a limited form: If the first digit is a 0, or if
there are three octal digits, it is considered an octal escape
 Otherwise, it is
a group reference
  As for string literals, octal escapes are always at most
three digits in length




7
2
2
 Module Contents¶

The module defines several functions, constants, and an exception
 Some of the
functions are simplified versions of the full featured methods for compiled
regular expressions
  Most non-trivial applications always use the compiled
form




re
compile(pattern, flags=0)¶

Compile a regular expression pattern into a regular expression object, which
can be used for matching using its match() and search() methods,
described below



The expression&#8217;s behaviour can be modified by specifying a flags value

Values can be any of the following variables, combined using bitwise OR (the
| operator)



The sequence

prog = re
compile(pattern)
result = prog
match(string)



is equivalent to

result = re
match(pattern, string)



but using re
compile() and saving the resulting regular expression
object for reuse is more efficient when the expression will be used several
times in a single program



Note

The compiled versions of the most recent patterns passed to
re
match(), re
search() or re
compile() are cached, so
programs that use only a few regular expressions at a time needn&#8217;t worry
about compiling regular expressions







re
DEBUG¶

Display debug information about compiled expression






re
I¶

re
IGNORECASE¶

Perform case-insensitive matching; expressions like [A-Z] will match
lowercase letters, too
  This is not affected by the current locale






re
L¶

re
LOCALE¶

Make \w, \W, \b, \B, \s and \S dependent on the
current locale






re
M¶

re
MULTILINE¶

When specified, the pattern character '^' matches at the beginning of the
string and at the beginning of each line (immediately following each newline);
and the pattern character '$' matches at the end of the string and at the
end of each line (immediately preceding each newline)
  By default, '^'
matches only at the beginning of the string, and '$' only at the end of the
string and immediately before the newline (if any) at the end of the string






re
S¶

re
DOTALL¶

Make the '
' special character match any character at all, including a
newline; without this flag, '
' will match anything except a newline






re
U¶

re
UNICODE¶

Make \w, \W, \b, \B, \d, \D, \s and \S dependent
on the Unicode character properties database



New in version 2
0






re
X¶

re
VERBOSE¶

This flag allows you to write regular expressions that look nicer
 Whitespace
within the pattern is ignored, except when in a character class or preceded by
an unescaped backslash, and, when a line contains a '#' neither in a
character class or preceded by an unescaped backslash, all characters from the
leftmost such '#' through the end of the line are ignored



That means that the two following regular expression objects that match a
decimal number are functionally equal:

a = re
compile(r&quot;&quot;&quot;\d +  # the integral part
                   \
    # the decimal point
                   \d *  # some fractional digits&quot;&quot;&quot;, re
X)
b = re
compile(r&quot;\d+\
\d*&quot;)






re
search(pattern, string, flags=0)¶

Scan through string looking for a location where the regular expression
pattern produces a match, and return a corresponding MatchObject
instance
 Return None if no position in the string matches the pattern; note
that this is different from finding a zero-length match at some point in the
string






re
match(pattern, string, flags=0)¶

If zero or more characters at the beginning of string match the regular
expression pattern, return a corresponding MatchObject instance

Return None if the string does not match the pattern; note that this is
different from a zero-length match



Note that even in MULTILINE mode, re
match() will only match
at the beginning of the string and not at the beginning of each line



If you want to locate a match anywhere in string, use search()
instead (see also search() vs
 match())






re
split(pattern, string, maxsplit=0, flags=0)¶

Split string by the occurrences of pattern
  If capturing parentheses are
used in pattern, then the text of all groups in the pattern are also returned
as part of the resulting list
 If maxsplit is nonzero, at most maxsplit
splits occur, and the remainder of the string is returned as the final element
of the list
  (Incompatibility note: in the original Python 1
5 release,
maxsplit was ignored
  This has been fixed in later releases
)

&gt;&gt;&gt; re
split(&#39;\W+&#39;, &#39;Words, words, words
&#39;)
[&#39;Words&#39;, &#39;words&#39;, &#39;words&#39;, &#39;&#39;]
&gt;&gt;&gt; re
split(&#39;(\W+)&#39;, &#39;Words, words, words
&#39;)
[&#39;Words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;
&#39;, &#39;&#39;]
&gt;&gt;&gt; re
split(&#39;\W+&#39;, &#39;Words, words, words
&#39;, 1)
[&#39;Words&#39;, &#39;words, words
&#39;]
&gt;&gt;&gt; re
split(&#39;[a-f]+&#39;, &#39;0a3B9&#39;, flags=re
IGNORECASE)
[&#39;0&#39;, &#39;3&#39;, &#39;9&#39;]



If there are capturing groups in the separator and it matches at the start of
the string, the result will start with an empty string
  The same holds for
the end of the string:

&gt;&gt;&gt; re
split(&#39;(\W+)&#39;, &#39;


words, words


&#39;)
[&#39;&#39;, &#39;


&#39;, &#39;words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;


&#39;, &#39;&#39;]



That way, separator components are always found at the same relative
indices within the result list (e
g
, if there&#8217;s one capturing group
in the separator, the 0th, the 2nd and so forth)



Note that split will never split a string on an empty pattern match

For example:

&gt;&gt;&gt; re
split(&#39;x*&#39;, &#39;foo&#39;)
[&#39;foo&#39;]
&gt;&gt;&gt; re
split(&quot;(
m)^$&quot;, &quot;foo\n\nbar\n&quot;)
[&#39;foo\n\nbar\n&#39;]



Changed in version 2
7: Added the optional flags argument






re
findall(pattern, string, flags=0)¶

Return all non-overlapping matches of pattern in string, as a list of
strings
  The string is scanned left-to-right, and matches are returned in
the order found
  If one or more groups are present in the pattern, return a
list of groups; this will be a list of tuples if the pattern has more than
one group
  Empty matches are included in the result unless they touch the
beginning of another match



New in version 1
5
2



Changed in version 2
4: Added the optional flags argument






re
finditer(pattern, string, flags=0)¶

Return an iterator yielding MatchObject instances over all
non-overlapping matches for the RE pattern in string
  The string is
scanned left-to-right, and matches are returned in the order found
  Empty
matches are included in the result unless they touch the beginning of another
match



New in version 2
2



Changed in version 2
4: Added the optional flags argument






re
sub(pattern, repl, string, count=0, flags=0)¶

Return the string obtained by replacing the leftmost non-overlapping occurrences
of pattern in string by the replacement repl
  If the pattern isn&#8217;t found,
string is returned unchanged
  repl can be a string or a function; if it is
a string, any backslash escapes in it are processed
  That is, \n is
converted to a single newline character, \r is converted to a carriage return, and
so forth
  Unknown escapes such as \j are left alone
  Backreferences, such
as \6, are replaced with the substring matched by group 6 in the pattern

For example:

&gt;&gt;&gt; re
sub(r&#39;def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):&#39;,



        r&#39;static PyObject*\npy_\1(void)\n{&#39;,



        &#39;def myfunc():&#39;)
&#39;static PyObject*\npy_myfunc(void)\n{&#39;



If repl is a function, it is called for every non-overlapping occurrence of
pattern
  The function takes a single match object argument, and returns the
replacement string
  For example:

&gt;&gt;&gt; def dashrepl(matchobj):



     if matchobj
group(0) == &#39;-&#39;: return &#39; &#39;



     else: return &#39;-&#39;
&gt;&gt;&gt; re
sub(&#39;-{1,2}&#39;, dashrepl, &#39;pro----gram-files&#39;)
&#39;pro--gram files&#39;
&gt;&gt;&gt; re
sub(r&#39;\sAND\s&#39;, &#39; &amp; &#39;, &#39;Baked Beans And Spam&#39;, flags=re
IGNORECASE)
&#39;Baked Beans &amp; Spam&#39;



The pattern may be a string or an RE object



The optional argument count is the maximum number of pattern occurrences to be
replaced; count must be a non-negative integer
  If omitted or zero, all
occurrences will be replaced
 Empty matches for the pattern are replaced only
when not adjacent to a previous match, so sub('x*', '-', 'abc') returns
'-a-b-c-'



In addition to character escapes and backreferences as described above,
\g&lt;name&gt; will use the substring matched by the group named name, as
defined by the (
P&lt;name&gt;


) syntax
 \g&lt;number&gt; uses the corresponding
group number; \g&lt;2&gt; is therefore equivalent to \2, but isn&#8217;t ambiguous
in a replacement such as \g&lt;2&gt;0
  \20 would be interpreted as a
reference to group 20, not a reference to group 2 followed by the literal
character '0'
  The backreference \g&lt;0&gt; substitutes in the entire
substring matched by the RE



Changed in version 2
7: Added the optional flags argument






re
subn(pattern, repl, string, count=0, flags=0)¶

Perform the same operation as sub(), but return a tuple (new_string,
number_of_subs_made)



Changed in version 2
7: Added the optional flags argument






re
escape(string)¶

Return string with all non-alphanumerics backslashed; this is useful if you
want to match an arbitrary literal string that may have regular expression
metacharacters in it






re
purge()¶

Clear the regular expression cache






exception re
error¶

Exception raised when a string passed to one of the functions here is not a
valid regular expression (for example, it might contain unmatched parentheses)
or when some other error occurs during compilation or matching
  It is never an
error if a string contains no match for a pattern






7
2
3
 Regular Expression Objects¶


class re
RegexObject¶

The RegexObject class supports the following methods and attributes:



search(string[, pos[, endpos]])¶

Scan through string looking for a location where this regular expression
produces a match, and return a corresponding MatchObject instance

Return None if no position in the string matches the pattern; note that this
is different from finding a zero-length match at some point in the string



The optional second parameter pos gives an index in the string where the
search is to start; it defaults to 0
  This is not completely equivalent to
slicing the string; the '^' pattern character matches at the real beginning
of the string and at positions just after a newline, but not necessarily at the
index where the search is to start



The optional parameter endpos limits how far the string will be searched; it
will be as if the string is endpos characters long, so only the characters
from pos to endpos - 1 will be searched for a match
  If endpos is less
than pos, no match will be found, otherwise, if rx is a compiled regular
expression object, rx
search(string, 0, 50) is equivalent to
rx
search(string[:50], 0)


&gt;&gt;&gt; pattern = re
compile(&quot;d&quot;)
&gt;&gt;&gt; pattern
search(&quot;dog&quot;)     # Match at index 0
&lt;_sre
SRE_Match object at 


&gt;
&gt;&gt;&gt; pattern
search(&quot;dog&quot;, 1)  # No match; search doesn&#39;t include the &quot;d&quot;






match(string[, pos[, endpos]])¶

If zero or more characters at the beginning of string match this regular
expression, return a corresponding MatchObject instance
  Return
None if the string does not match the pattern; note that this is different
from a zero-length match



The optional pos and endpos parameters have the same meaning as for the
search() method


&gt;&gt;&gt; pattern = re
compile(&quot;o&quot;)
&gt;&gt;&gt; pattern
match(&quot;dog&quot;)      # No match as &quot;o&quot; is not at the start of &quot;dog&quot;

&gt;&gt;&gt; pattern
match(&quot;dog&quot;, 1)   # Match as &quot;o&quot; is the 2nd character of &quot;dog&quot;

&lt;_sre
SRE_Match object at 


&gt;



If you want to locate a match anywhere in string, use
search() instead (see also search() vs
 match())






split(string, maxsplit=0)¶

Identical to the split() function, using the compiled pattern






findall(string[, pos[, endpos]])¶

Similar to the findall() function, using the compiled pattern, but
also accepts optional pos and endpos parameters that limit the search
region like for match()






finditer(string[, pos[, endpos]])¶

Similar to the finditer() function, using the compiled pattern, but
also accepts optional pos and endpos parameters that limit the search
region like for match()






sub(repl, string, count=0)¶

Identical to the sub() function, using the compiled pattern






subn(repl, string, count=0)¶

Identical to the subn() function, using the compiled pattern






flags¶

The regex matching flags
  This is a combination of the flags given to
compile() and any (



) inline flags in the pattern






groups¶

The number of capturing groups in the pattern






groupindex¶

A dictionary mapping any symbolic group names defined by (
P&lt;id&gt;) to group
numbers
  The dictionary is empty if no symbolic groups were used in the
pattern






pattern¶

The pattern string from which the RE object was compiled








7
2
4
 Match Objects¶


class re
MatchObject¶

Match objects always have a boolean value of True

Since match() and search() return None
when there is no match, you can test whether there was a match with a simple
if statement:

match = re
search(pattern, string)
if match:
    process(match)



Match objects support the following methods and attributes:



expand(template)¶

Return the string obtained by doing backslash substitution on the template
string template, as done by the sub() method
  Escapes
such as \n are converted to the appropriate characters, and numeric
backreferences (\1, \2) and named backreferences (\g&lt;1&gt;,
\g&lt;name&gt;) are replaced by the contents of the corresponding group






group([group1, 


])¶

Returns one or more subgroups of the match
  If there is a single argument, the
result is a single string; if there are multiple arguments, the result is a
tuple with one item per argument
 Without arguments, group1 defaults to zero
(the whole match is returned)
 If a groupN argument is zero, the corresponding
return value is the entire matching string; if it is in the inclusive range
[1

99], it is the string matching the corresponding parenthesized group
  If a
group number is negative or larger than the number of groups defined in the
pattern, an IndexError exception is raised
 If a group is contained in a
part of the pattern that did not match, the corresponding result is None

If a group is contained in a part of the pattern that matched multiple times,
the last match is returned


&gt;&gt;&gt; m = re
match(r&quot;(\w+) (\w+)&quot;, &quot;Isaac Newton, physicist&quot;)
&gt;&gt;&gt; m
group(0)       # The entire match
&#39;Isaac Newton&#39;
&gt;&gt;&gt; m
group(1)       # The first parenthesized subgroup

&#39;Isaac&#39;
&gt;&gt;&gt; m
group(2)       # The second parenthesized subgroup

&#39;Newton&#39;
&gt;&gt;&gt; m
group(1, 2)    # Multiple arguments give us a tuple

(&#39;Isaac&#39;, &#39;Newton&#39;)



If the regular expression uses the (
P&lt;name&gt;


) syntax, the groupN
arguments may also be strings identifying groups by their group name
  If a
string argument is not used as a group name in the pattern, an IndexError
exception is raised



A moderately complicated example:

&gt;&gt;&gt; m = re
match(r&quot;(
P&lt;first_name&gt;\w+) (
P&lt;last_name&gt;\w+)&quot;, &quot;Malcolm Reynolds&quot;)
&gt;&gt;&gt; m
group(&#39;first_name&#39;)
&#39;Malcolm&#39;
&gt;&gt;&gt; m
group(&#39;last_name&#39;)
&#39;Reynolds&#39;



Named groups can also be referred to by their index:

&gt;&gt;&gt; m
group(1)
&#39;Malcolm&#39;
&gt;&gt;&gt; m
group(2)
&#39;Reynolds&#39;



If a group matches multiple times, only the last match is accessible:

&gt;&gt;&gt; m = re
match(r&quot;(

)+&quot;, &quot;a1b2c3&quot;)  # Matches 3 times

&gt;&gt;&gt; m
group(1)                        # Returns only the last match

&#39;c3&#39;






groups([default])¶

Return a tuple containing all the subgroups of the match, from 1 up to however
many groups are in the pattern
  The default argument is used for groups that
did not participate in the match; it defaults to None
  (Incompatibility
note: in the original Python 1
5 release, if the tuple was one element long, a
string would be returned instead
  In later versions (from 1
5
1 on), a
singleton tuple is returned in such cases
)


For example:

&gt;&gt;&gt; m = re
match(r&quot;(\d+)\
(\d+)&quot;, &quot;24
1632&quot;)
&gt;&gt;&gt; m
groups()
(&#39;24&#39;, &#39;1632&#39;)



If we make the decimal place and everything after it optional, not all groups
might participate in the match
  These groups will default to None unless
the default argument is given:

&gt;&gt;&gt; m = re
match(r&quot;(\d+)\

(\d+)
&quot;, &quot;24&quot;)
&gt;&gt;&gt; m
groups()      # Second group defaults to None

(&#39;24&#39;, None)
&gt;&gt;&gt; m
groups(&#39;0&#39;)   # Now, the second group defaults to &#39;0&#39;

(&#39;24&#39;, &#39;0&#39;)






groupdict([default])¶

Return a dictionary containing all the named subgroups of the match, keyed by
the subgroup name
  The default argument is used for groups that did not
participate in the match; it defaults to None
  For example:

&gt;&gt;&gt; m = re
match(r&quot;(
P&lt;first_name&gt;\w+) (
P&lt;last_name&gt;\w+)&quot;, &quot;Malcolm Reynolds&quot;)
&gt;&gt;&gt; m
groupdict()
{&#39;first_name&#39;: &#39;Malcolm&#39;, &#39;last_name&#39;: &#39;Reynolds&#39;}






start([group])¶

end([group])¶

Return the indices of the start and end of the substring matched by group;
group defaults to zero (meaning the whole matched substring)
 Return -1 if
group exists but did not contribute to the match
  For a match object m, and
a group g that did contribute to the match, the substring matched by group g
(equivalent to m
group(g)) is

m
string[m
start(g):m
end(g)]



Note that m
start(group) will equal m
end(group) if group matched a
null string
  For example, after m = re
search('b(c
)', 'cba'),
m
start(0) is 1, m
end(0) is 2, m
start(1) and m
end(1) are both
2, and m
start(2) raises an IndexError exception



An example that will remove remove_this from email addresses:

&gt;&gt;&gt; email = &quot;tony@tiremove_thisger
net&quot;
&gt;&gt;&gt; m = re
search(&quot;remove_this&quot;, email)
&gt;&gt;&gt; email[:m
start()] + email[m
end():]
&#39;tony@tiger
net&#39;






span([group])¶

For MatchObject m, return the 2-tuple (m
start(group),
m
end(group))
 Note that if group did not contribute to the match, this is
(-1, -1)
  group defaults to zero, the entire match






pos¶

The value of pos which was passed to the search() or
match() method of the RegexObject
  This is the
index into the string at which the RE engine started looking for a match






endpos¶

The value of endpos which was passed to the search() or
match() method of the RegexObject
  This is the
index into the string beyond which the RE engine will not go






lastindex¶

The integer index of the last matched capturing group, or None if no group
was matched at all
 For example, the expressions (a)b, ((a)(b)), and
((ab)) will have lastindex == 1 if applied to the string 'ab', while
the expression (a)(b) will have lastindex == 2, if applied to the same
string






lastgroup¶

The name of the last matched capturing group, or None if the group didn&#8217;t
have a name, or if no group was matched at all






re¶

The regular expression object whose match() or
search() method produced this MatchObject
instance






string¶

The string passed to match() or
search()








7
2
5
 Examples¶

7
2
5
1
 Checking For a Pair¶

In this example, we&#8217;ll use the following helper function to display match
objects a little more gracefully:

def displaymatch(match):
    if match is None:
        return None
    return &#39;&lt;Match: %r, groups=%r&gt;&#39; % (match
group(), match
groups())



Suppose you are writing a poker program where a player&#8217;s hand is represented as
a 5-character string with each character representing a card, &#8220;a&#8221; for ace, &#8220;k&#8221;
for king, &#8220;q&#8221; for queen, &#8220;j&#8221; for jack, &#8220;t&#8221; for 10, and &#8220;2&#8221; through &#8220;9&#8221;
representing the card with that value



To see if a given string is a valid hand, one could do the following:

&gt;&gt;&gt; valid = re
compile(r&quot;^[a2-9tjqk]{5}$&quot;)
&gt;&gt;&gt; displaymatch(valid
match(&quot;akt5q&quot;))  # Valid

&quot;&lt;Match: &#39;akt5q&#39;, groups=()&gt;&quot;
&gt;&gt;&gt; displaymatch(valid
match(&quot;akt5e&quot;))  # Invalid

&gt;&gt;&gt; displaymatch(valid
match(&quot;akt&quot;))    # Invalid

&gt;&gt;&gt; displaymatch(valid
match(&quot;727ak&quot;))  # Valid

&quot;&lt;Match: &#39;727ak&#39;, groups=()&gt;&quot;



That last hand, &quot;727ak&quot;, contained a pair, or two of the same valued cards

To match this with a regular expression, one could use backreferences as such:

&gt;&gt;&gt; pair = re
compile(r&quot;
*(
)
*\1&quot;)
&gt;&gt;&gt; displaymatch(pair
match(&quot;717ak&quot;))     # Pair of 7s

&quot;&lt;Match: &#39;717&#39;, groups=(&#39;7&#39;,)&gt;&quot;
&gt;&gt;&gt; displaymatch(pair
match(&quot;718ak&quot;))     # No pairs

&gt;&gt;&gt; displaymatch(pair
match(&quot;354aa&quot;))     # Pair of aces

&quot;&lt;Match: &#39;354aa&#39;, groups=(&#39;a&#39;,)&gt;&quot;



To find out what card the pair consists of, one could use the
group() method of MatchObject in the following
manner:

&gt;&gt;&gt; pair
match(&quot;717ak&quot;)
group(1)
&#39;7&#39;

# Error because re
match() returns None, which doesn&#39;t have a group() method:
&gt;&gt;&gt; pair
match(&quot;718ak&quot;)
group(1)
Traceback (most recent call last):
  File &quot;&lt;pyshell#23&gt;&quot;, line 1, in &lt;module&gt;
    re
match(r&quot;
*(
)
*\1&quot;, &quot;718ak&quot;)
group(1)
AttributeError: &#39;NoneType&#39; object has no attribute &#39;group&#39;

&gt;&gt;&gt; pair
match(&quot;354aa&quot;)
group(1)
&#39;a&#39;




7
2
5
2
 Simulating scanf()¶
Python does not currently have an equivalent to scanf()
  Regular
expressions are generally more powerful, though also more verbose, than
scanf() format strings
  The table below offers some more-or-less
equivalent mappings between scanf() format tokens and regular
expressions








scanf() Token
Regular Expression



%c



%5c

{5}

%d
[-+]
\d+

%e, %E, %f, %g
[-+]
(\d+(\
\d*)
|\
\d+)([eE][-+]
\d+)


%i
[-+]
(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)

%o
[-+]
[0-7]+

%s
\S+

%u
\d+

%x, %X
[-+]
(0[xX])
[\dA-Fa-f]+




To extract the filename and numbers from a string like

/usr/sbin/sendmail - 0 errors, 4 warnings


you would use a scanf() format like

%s - %d errors, %d warnings


The equivalent regular expression would be

(\S+) - (\d+) errors, (\d+) warnings



7
2
5
3
 search() vs
 match()¶

Python offers two different primitive operations based on regular expressions:
re
match() checks for a match only at the beginning of the string, while
re
search() checks for a match anywhere in the string (this is what Perl
does by default)



For example:

&gt;&gt;&gt; re
match(&quot;c&quot;, &quot;abcdef&quot;)  # No match
&gt;&gt;&gt; re
search(&quot;c&quot;, &quot;abcdef&quot;) # Match
&lt;_sre
SRE_Match object at 


&gt;



Regular expressions beginning with '^' can be used with search() to
restrict the match at the beginning of the string:

&gt;&gt;&gt; re
match(&quot;c&quot;, &quot;abcdef&quot;)  # No match
&gt;&gt;&gt; re
search(&quot;^c&quot;, &quot;abcdef&quot;) # No match
&gt;&gt;&gt; re
search(&quot;^a&quot;, &quot;abcdef&quot;)  # Match
&lt;_sre
SRE_Match object at 


&gt;



Note however that in MULTILINE mode match() only matches at the
beginning of the string, whereas using search() with a regular expression
beginning with '^' will match at the beginning of each line


&gt;&gt;&gt; re
match(&#39;X&#39;, &#39;A\nB\nX&#39;, re
MULTILINE)  # No match
&gt;&gt;&gt; re
search(&#39;^X&#39;, &#39;A\nB\nX&#39;, re
MULTILINE)  # Match
&lt;_sre
SRE_Match object at 


&gt;




7
2
5
4
 Making a Phonebook¶

split() splits a string into a list delimited by the passed pattern
  The
method is invaluable for converting textual data into data structures that can be
easily read and modified by Python as demonstrated in the following example that
creates a phonebook



First, here is the input
  Normally it may come from a file, here we are using
triple-quoted string syntax:

&gt;&gt;&gt; text = &quot;&quot;&quot;Ross McFluff: 834
345
1254 155 Elm Street







 Ronald Heathmore: 892
345
3428 436 Finley Avenue



 Frank Burger: 925
541
7625 662 South Dogwood Way











 Heather Albrecht: 548
326
4584 919 Park Place&quot;&quot;&quot;



The entries are separated by one or more newlines
 Now we convert the string
into a list with each nonempty line having its own entry:

&gt;&gt;&gt; entries = re
split(&quot;\n+&quot;, text)
&gt;&gt;&gt; entries
[&#39;Ross McFluff: 834
345
1254 155 Elm Street&#39;,
&#39;Ronald Heathmore: 892
345
3428 436 Finley Avenue&#39;,
&#39;Frank Burger: 925
541
7625 662 South Dogwood Way&#39;,
&#39;Heather Albrecht: 548
326
4584 919 Park Place&#39;]



Finally, split each entry into a list with first name, last name, telephone
number, and address
  We use the maxsplit parameter of split()
because the address has spaces, our splitting pattern, in it:

&gt;&gt;&gt; [re
split(&quot;:
 &quot;, entry, 3) for entry in entries]
[[&#39;Ross&#39;, &#39;McFluff&#39;, &#39;834
345
1254&#39;, &#39;155 Elm Street&#39;],
[&#39;Ronald&#39;, &#39;Heathmore&#39;, &#39;892
345
3428&#39;, &#39;436 Finley Avenue&#39;],
[&#39;Frank&#39;, &#39;Burger&#39;, &#39;925
541
7625&#39;, &#39;662 South Dogwood Way&#39;],
[&#39;Heather&#39;, &#39;Albrecht&#39;, &#39;548
326
4584&#39;, &#39;919 Park Place&#39;]]



The :
 pattern matches the colon after the last name, so that it does not
occur in the result list
  With a maxsplit of 4, we could separate the
house number from the street name:

&gt;&gt;&gt; [re
split(&quot;:
 &quot;, entry, 4) for entry in entries]
[[&#39;Ross&#39;, &#39;McFluff&#39;, &#39;834
345
1254&#39;, &#39;155&#39;, &#39;Elm Street&#39;],
[&#39;Ronald&#39;, &#39;Heathmore&#39;, &#39;892
345
3428&#39;, &#39;436&#39;, &#39;Finley Avenue&#39;],
[&#39;Frank&#39;, &#39;Burger&#39;, &#39;925
541
7625&#39;, &#39;662&#39;, &#39;South Dogwood Way&#39;],
[&#39;Heather&#39;, &#39;Albrecht&#39;, &#39;548
326
4584&#39;, &#39;919&#39;, &#39;Park Place&#39;]]




7
2
5
5
 Text Munging¶

sub() replaces every occurrence of a pattern with a string or the
result of a function
  This example demonstrates using sub() with
a function to &#8220;munge&#8221; text, or randomize the order of all the characters
in each word of a sentence except for the first and last characters:

&gt;&gt;&gt; def repl(m):



   inner_word = list(m
group(2))



   random
shuffle(inner_word)



   return m
group(1) + &quot;&quot;
join(inner_word) + m
group(3)
&gt;&gt;&gt; text = &quot;Professor Abdolmalek, please report your absences promptly
&quot;
&gt;&gt;&gt; re
sub(r&quot;(\w)(\w+)(\w)&quot;, repl, text)
&#39;Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy
&#39;
&gt;&gt;&gt; re
sub(r&quot;(\w)(\w+)(\w)&quot;, repl, text)
&#39;Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy
&#39;




7
2
5
6
 Finding all Adverbs¶

findall() matches all occurrences of a pattern, not just the first
one as search() does
  For example, if one was a writer and wanted to
find all of the adverbs in some text, he or she might use findall() in
the following manner:

&gt;&gt;&gt; text = &quot;He was carefully disguised but captured quickly by police
&quot;
&gt;&gt;&gt; re
findall(r&quot;\w+ly&quot;, text)
[&#39;carefully&#39;, &#39;quickly&#39;]




7
2
5
7
 Finding all Adverbs and their Positions¶

If one wants more information about all matches of a pattern than the matched
text, finditer() is useful as it provides instances of
MatchObject instead of strings
  Continuing with the previous example,
if one was a writer who wanted to find all of the adverbs and their positions
in some text, he or she would use finditer() in the following manner:

&gt;&gt;&gt; text = &quot;He was carefully disguised but captured quickly by police
&quot;
&gt;&gt;&gt; for m in re
finditer(r&quot;\w+ly&quot;, text):



     print &#39;%02d-%02d: %s&#39; % (m
start(), m
end(), m
group(0))
07-16: carefully
40-47: quickly




7
2
5
8
 Raw String Notation¶

Raw string notation (r&quot;text&quot;) keeps regular expressions sane
  Without it,
every backslash ('\') in a regular expression would have to be prefixed with
another one to escape it
  For example, the two following lines of code are
functionally identical:

&gt;&gt;&gt; re
match(r&quot;\W(
)\1\W&quot;, &quot; ff &quot;)
&lt;_sre
SRE_Match object at 


&gt;
&gt;&gt;&gt; re
match(&quot;\\W(
)\\1\\W&quot;, &quot; ff &quot;)
&lt;_sre
SRE_Match object at 


&gt;



When one wants to match a literal backslash, it must be escaped in the regular
expression
  With raw string notation, this means r&quot;\\&quot;
  Without raw string
notation, one must use &quot;\\\\&quot;, making the following lines of code
functionally identical:

&gt;&gt;&gt; re
match(r&quot;\\&quot;, r&quot;\\&quot;)
&lt;_sre
SRE_Match object at 


&gt;
&gt;&gt;&gt; re
match(&quot;\\\\&quot;, r&quot;\\&quot;)
&lt;_sre
SRE_Match object at 


&gt;







          
        
      
      
        
  Table Of Contents
  
7
2
 re &#8212; Regular expression operations
7
2
1
 Regular Expression Syntax
7
2
2
 Module Contents
7
2
3
 Regular Expression Objects
7
2
4
 Match Objects
7
2
5
 Examples
7
2
5
1
 Checking For a Pair
7
2
5
2
 Simulating scanf()
7
2
5
3
 search() vs
 match()
7
2
5
4
 Making a Phonebook
7
2
5
5
 Text Munging
7
2
5
6
 Finding all Adverbs
7
2
5
7
 Finding all Adverbs and their Positions
7
2
5
8
 Raw String Notation






  Previous topic
  7
1
 string &#8212; Common string operations

  Next topic
  7
3
 struct &#8212; Interpret strings as packed binary data

This Page

  Report a Bug
  Show Source



  Quick search
    
      
      
      
      
    
    
    Enter search terms or a module, class or function name

    


$('#searchbox')
show(0);
        
      
      
    
    
      Navigation
      
        
          index
        
          modules |
        
          next |
        
          previous |
        
        Python &raquo;
        
          2
7
5
          Documentation &raquo;
        

          The Python Standard Library &raquo;
          7
 String Services &raquo; 
      
    
    
    &copy; Copyright 1990-2013, Python Software Foundation

    
    The Python Software Foundation is a non-profit corporation

    Please donate

    
    Last updated on May 17, 2013

    Found a bug

    
    Created using Sphinx 1
0
7

    

  
